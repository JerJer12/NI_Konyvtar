@page "/members/{id:int}/edit"
@inject ILibraryService LibraryService
@inject NavigationManager NavigationManager
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms

<h3>Edit Member</h3>

@if (user != null)
{
    <EditForm Model="@user" OnValidSubmit="SaveUser">
        <DataAnnotationsValidator/>
        <dl>
            <dt>Name:</dt>
            <dd>
                <InputText id="name" @bind-Value="@user.Name" />
                <ValidationMessage For="@(() => user.Name)" />
            </dd>

            <dt>Address:</dt>
            <dd>
                <InputText id="address" @bind-Value="@user.Address" />
                <ValidationMessage For="@(() => user.Address)" />
            </dd>

            <dt>Reader Number:</dt>
            <dd>@user.ReaderNumber</dd>

            <dt>Birth Date:</dt>
            <dd>
                <InputDate id="birthDate" @bind-Value="@user.BirthDate" />
                <ValidationMessage For="@(() => user.BirthDate)" />
            </dd>
        </dl>

        @if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

        <div>
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-danger" @onclick="DeleteUser">Delete</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
        </div>
    </EditForm>
}
else
{
    <p>Loading member details...</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private User user;

     private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        user = await LibraryService.GetSingleUser(Id);
        Console.WriteLine(user.ReaderNumber);
    }

    private async Task SaveUser()
    {
        if (user.BirthDate < DateTime.Today.AddDays(-1))
        {
            await LibraryService.UpdateUser(Id, user);
            NavigationManager.NavigateTo($"/members/{Id}");
        }
        else{
            errorMessage = "Invalid Date";
        }
    }

    private async Task DeleteUser()
    {
        Console.WriteLine(user.ReaderNumber);
        await LibraryService.DeleteUser(user.ReaderNumber);
        NavigationManager.NavigateTo("/members");
    }

    private void CancelEdit()
    {
        NavigationManager.NavigateTo($"/members/{@user.ReaderNumber}");
    }
}