@page "/members/{id:int}"
@inject ILibraryService LibraryService
@inject NavigationManager NavigationManager
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms

<h3>Member Details</h3>

@if (user != null)
{
    <dl>
        <dt>Name:</dt>
        <dd>@user.Name</dd>

        <dt>Address:</dt>
        <dd>@user.Address</dd>

        <dt>Reader Number:</dt>
        <dd>@user.ReaderNumber</dd>

        <dt>Birth Date:</dt>
        <dd>@user.BirthDate.ToShortDateString()</dd>
    </dl>

    <div>
        <button type="button" class="btn btn-primary" @onclick="EditUser">Edit</button>
    </div>
}
else
{
    <p>Loading member details...</p>
}

@if (borrowings != null)
{
    <div style="margin-top: 25px;"></div>
    <div class="d-flex justify-content-between mb-3">
        <h3>Borrowings</h3>
        <button type="button" class="btn btn-primary" @onclick="AddBorrow">Add New</button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Borrow Date</th>
                <th>Return Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var borrowing in borrowings)
            {
                <tr class="@GetBorrowingRowClass(borrowing.ReturnDate)">
                    <td>@borrowing.Title</td>
                    <td>@borrowing.BorrowDate.ToShortDateString()</td>
                    <td>@borrowing.ReturnDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private User user;
    private List<Borrow>? borrowings;
    private List<BorrowDetails>? borrowDetails;

    protected override async Task OnInitializedAsync()
    {
        user = await LibraryService.GetSingleUser(Id);
        await LoadBorrowings();
    }

    private async Task LoadBorrowings()
    {
        borrowings = await LibraryService.GetBorrowsForUser(Id);
    }

    private string GetBorrowingRowClass(DateTime returnDate)
    {
        return returnDate < DateTime.Now ? "table-danger" : string.Empty;
    }

    private void EditUser()
    {
        NavigationManager.NavigateTo($"/members/{Id}/edit");
    }

    private void AddBorrow()
    {
        NavigationManager.NavigateTo($"/members/{Id}/addBorrow");
    }
}