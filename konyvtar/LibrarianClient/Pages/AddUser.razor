@page "/members/add"
@inject ILibraryService LibraryService
@inject NavigationManager NavigationManager

<h3>Add New User</h3>
    <EditForm Model="@newUser" OnValidSubmit="@AddNewUser">
        <DataAnnotationsValidator/>
        <div class="form-group row">
            <label for="name" class="col-sm-2 col-form-label">Name:</label>
            <div class="col-sm-10">
                <InputText id="name" @bind-Value="@newUser.Name" class="form-control" required />
                <ValidationMessage For="@(() => newUser.Name)" />
            </div>
        </div>
        
        <div class="form-group row">
            <label for="address" class="col-sm-2 col-form-label">Address:</label>
            <div class="col-sm-10">
                <InputText id="address" @bind-Value="@newUser.Address" class="form-control" required />
                <ValidationMessage For="@(() => newUser.Address)" />
            </div>
        </div>

        <div class="form-group row">
            <label for="birthDate" class="col-sm-2 col-form-label">Birth:</label>
            <div class="col-sm-10">
                <InputDate id="birthDate" @bind-Value="@newUser.BirthDate" />
                <ValidationMessage For="@(() => newUser.BirthDate)" />
            </div>
        </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

        <div class="form-group row">
            <div class="col-sm-10 offset-sm-2">
                <button type="submit" class="btn btn-primary">Add User</button>
                <button type="button" class="btn btn-danger" @onclick="CancelAdd">Cancel</button>
            </div>
        </div>
    </EditForm>


@code {
    private User newUser = new User();

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        newUser.BirthDate = DateTime.Today;
    }
    private async Task AddNewUser()
    {
        try
        {
            if (newUser.BirthDate < DateTime.Today.AddDays(-1))
            {
                await LibraryService.AddUser(newUser);
                NavigationManager.NavigateTo("/members");
            }
            else
            {
                Console.WriteLine("Invalid Date");
                errorMessage = "Invalid Date";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to add user: {ex.Message}");
        }
    }

    private async Task CancelAdd()
    {
        newUser = new User();
        NavigationManager.NavigateTo("/members");
    }
}