@page "/books"
@inject ILibraryService LibraryService
@using System.Net.Http.Json

<h1>Books</h1>

@if (books == null)
{
    <p>Loading books...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Publisher</th>
                <th>Inventory Number</th>
                <th>Publication Year</th>
                <th>Status</th>
                <th>Borrower Name</th>
                <th>Return Date</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < books.Count; i++)
            {
                <tr>
                    <td>@books[i].Title</td>
                    <td>@books[i].Author</td>
                    <td>@books[i].Publisher</td>
                    <td>@books[i].InventoryNumber</td>
                    <td>@books[i].PublicationYear</td>
                    <td>@bookDetails[i].status</td>
                    <td>@(bookDetails[i].status == "in" ? "-" : bookDetails[i].borrowerName)</td>
                    <td>@(bookDetails[i].status == "in" ? "-" : bookDetails[i].returnDate.ToString("yyyy-MM-dd"))</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Book> books;
    private List<BookDetails> bookDetails = new List<BookDetails>();
    private List<string> debugMessages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            books = await LibraryService.GetBooks();
            await GetBookDetails();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to retrieve books: {ex.Message}");
        }
    }

    private async Task GetBookDetails()
    {
        foreach (var book in books)
        {
            BookDetails details = await LibraryService.GetSingleBook(book.InventoryNumber);
            bookDetails.Add(details);
        }
    }
}